{"version":3,"sources":["../../../src/actions/index.js"],"names":["parseJSON","loginUser","logoutUser","LOGIN_USER_REQUEST","LOGIN_USER_SUCCESS","LOGIN_USER_FAILURE","LOGOUT_REQUEST","LOGOUT_SUCCESS","LOGOUT_FAILURE","response","json","requestLogin","name","type","isFetching","isAuthenticated","receiveLogin","user","id_token","loginError","message","requestLogout","receiveLogout","creds","config","method","headers","body","email","password","dispatch","fetch","then","ok","Promise","reject","localStorage","setItem","catch","console","log","err","removeItem"],"mappings":";;;;;;QAYgBA,S,GAAAA,S;QAgDAC,S,GAAAA,S;QAgCAC,U,GAAAA,U;;AA5FhB;;;;AACA;;;;AACA;;;;AAEO,IAAMC,kDAAqB,oBAA3B;AACA,IAAMC,kDAAqB,oBAA3B;AACA,IAAMC,kDAAqB,oBAA3B;AACA,IAAMC,0CAAiB,gBAAvB;AACA,IAAMC,0CAAiB,gBAAvB;AACA,IAAMC,0CAAiB,gBAAvB;AACP;;AAEO,SAASR,SAAT,CAAmBS,QAAnB,EAA6B;AAChC,WAAOA,SAASC,IAAT,EAAP;AACH;;AAED,SAASC,YAAT,CAAsBC,IAAtB,EAA4B;AACxB,WAAO;AACHC,cAAMV,kBADH;AAEHW,oBAAY,IAFT;AAGHC,yBAAiB,KAHd;AAIHH;AAJG,KAAP;AAMH;;AAED,SAASI,YAAT,CAAsBC,IAAtB,EAA4B;AACxB,WAAO;AACHJ,cAAMT,kBADH;AAEHU,oBAAY,KAFT;AAGHC,yBAAiB,IAHd;AAIHG,kBAAUD,KAAKC;AAJZ,KAAP;AAMH;;AAED,SAASC,UAAT,CAAoBC,OAApB,EAA6B;AACzB,WAAO;AACHP,cAAMR,kBADH;AAEHS,oBAAY,KAFT;AAGHC,yBAAiB,KAHd;AAIHK;AAJG,KAAP;AAMH;;AAED,SAASC,aAAT,GAAyB;AACrB,WAAO;AACHR,cAAMP,cADH;AAEHQ,oBAAY,IAFT;AAGHC,yBAAiB;AAHd,KAAP;AAKH;;AAED,SAASO,aAAT,GAAyB;AACrB,WAAO;AACHT,cAAMN,cADH;AAEHO,oBAAY,KAFT;AAGHC,yBAAiB;AAHd,KAAP;AAKH;;AAGM,SAASd,SAAT,CAAmBsB,KAAnB,EAA0B;;AAE7B,QAAIC,SAAS;AACTC,gBAAQ,MADC;AAETC,iBAAS,EAAE,kBAAiB,mCAAnB,EAFA;AAGTC,yBAAef,KAAKgB,KAApB,kBAAsChB,KAAKiB;AAHlC,KAAb;;AAMA,WAAO,oBAAY;AACf;AACAC,iBAASnB,aAAaC,IAAb,CAAT;;AAEA,eAAOmB,MAAM,uCAAN,EAA+CP,MAA/C,EACFQ,IADE,CACG;AAAA,mBACFvB,SAASC,IAAT,GAAgBsB,IAAhB,CAAqB;AAAA,uBAAS,EAAEf,UAAF,EAAQR,kBAAR,EAAT;AAAA,aAArB,CADE;AAAA,SADH,EAGDuB,IAHC,CAGI,gBAAyB;AAAA,gBAAtBf,IAAsB,QAAtBA,IAAsB;AAAA,gBAAhBR,QAAgB,QAAhBA,QAAgB;;AAC5B,gBAAI,CAACA,SAASwB,EAAd,EAAkB;AACd;AACA;AACAH,yBAASX,WAAWF,KAAKG,OAAhB,CAAT;AACA,uBAAOc,QAAQC,MAAR,CAAelB,IAAf,CAAP;AACH,aALD,MAKO;AACH;AACAmB,6BAAaC,OAAb,CAAqB,UAArB,EAAiCpB,KAAKC,QAAtC;AACA;AACAY,yBAASd,aAAaC,IAAb,CAAT;AACH;AACJ,SAfE,EAeAqB,KAfA,CAeM;AAAA,mBAAOC,QAAQC,GAAR,CAAY,SAAZ,EAAuBC,GAAvB,CAAP;AAAA,SAfN,CAAP;AAgBH,KApBD;AAqBH;;AAED;AACO,SAASvC,UAAT,GAAsB;AACzB,WAAO,oBAAY;AACf4B,iBAAST,eAAT;AACAe,qBAAaM,UAAb,CAAwB,UAAxB;AACAZ,iBAASR,eAAT;AACH,KAJD;AAKH;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["import axios from 'axios';\nimport jwtDecode from 'jwt-decode';\nimport { CALL_API } from '../middleware/api'\n\nexport const LOGIN_USER_REQUEST = 'LOGIN_USER_REQUEST';\nexport const LOGIN_USER_SUCCESS = 'LOGIN_USER_SUCCESS';\nexport const LOGIN_USER_FAILURE = 'LOGIN_USER_FAILURE';\nexport const LOGOUT_REQUEST = 'LOGOUT_REQUEST';\nexport const LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';\nexport const LOGOUT_FAILURE = 'LOGOUT_FAILURE';\n//export const FETCH_USERS = 'FETCH_USERS';\n\nexport function parseJSON(response) {\n    return response.json()\n}\n\nfunction requestLogin(name) {\n    return {\n        type: LOGIN_USER_REQUEST,\n        isFetching: true,\n        isAuthenticated: false,\n        name\n    }\n}\n\nfunction receiveLogin(user) {\n    return {\n        type: LOGIN_USER_SUCCESS,\n        isFetching: false,\n        isAuthenticated: true,\n        id_token: user.id_token\n    }\n}\n\nfunction loginError(message) {\n    return {\n        type: LOGIN_USER_FAILURE,\n        isFetching: false,\n        isAuthenticated: false,\n        message\n    }\n}\n\nfunction requestLogout() {\n    return {\n        type: LOGOUT_REQUEST,\n        isFetching: true,\n        isAuthenticated: true\n    }\n}\n\nfunction receiveLogout() {\n    return {\n        type: LOGOUT_SUCCESS,\n        isFetching: false,\n        isAuthenticated: false\n    }\n}\n\n\nexport function loginUser(creds) {\n\n    let config = {\n        method: 'POST',\n        headers: { 'x-access-token':'application/x-www-form-urlencoded' },\n        body: `email=${name.email}&password=${name.password}`\n    }\n\n    return dispatch => {\n        // We dispatch requestLogin to kickoff the call to the API\n        dispatch(requestLogin(name))\n\n        return fetch('http://localhost:8080/sessions/create', config)\n            .then(response =>\n                response.json().then(user => ({ user, response }))\n            ).then(({ user, response }) =>  {\n                if (!response.ok) {\n                    // If there was a problem, we want to\n                    // dispatch the error condition\n                    dispatch(loginError(user.message))\n                    return Promise.reject(user)\n                } else {\n                    // If login was successful, set the token in local storage\n                    localStorage.setItem('id_token', user.id_token)\n                    // Dispatch the success action\n                    dispatch(receiveLogin(user))\n                }\n            }).catch(err => console.log(\"Error: \", err))\n    }\n}\n\n// Logs the user out\nexport function logoutUser() {\n    return dispatch => {\n        dispatch(requestLogout());\n        localStorage.removeItem('id_token');\n        dispatch(receiveLogout())\n    }\n}\n\n\n// export function fetchUsers() {\n//     const url = `${API}`;\n//     const request = axios.get(url);\n//\n//     return{\n//         type: FETCH_USERS,\n//         payload: request\n//     }\n// }"]}