{"version":3,"sources":["../../../src/middleware/api.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"api.js","sourcesContent":["// const BASE_URL = 'https://vaderstaging-95205.app.xervo.io';\n//\n// function callApi(endpoint, authenticated) {\n//\n//     let token = localStorage.getItem('id_token') || null\n//     let config = {}\n//\n//     if(authenticated) {\n//         if(token) {\n//             config = {\n//                 headers: { 'x-access-token': `Bearer ${token}` }\n//             }\n//         }\n//         else {\n//             throw \"No token saved!\"\n//         }\n//     }\n//\n//     return fetch(BASE_URL + endpoint, config)\n//         .then(response =>\n//             response.text().then(text => ({ text, response }))\n//         ).then(({ text, response }) => {\n//             if (!response.ok) {\n//                 return Promise.reject(text)\n//             }\n//\n//             return text\n//         }).catch(err => console.log(err))\n// }\n//\n// export const CALL_API = Symbol('Call API')\n//\n// export default store => next => action => {\n//\n//     const callAPI = action[CALL_API]\n//\n//     // So the middleware doesn't get applied to every single action\n//     if (typeof callAPI === 'undefined') {\n//         return next(action)\n//     }\n//\n//     let { endpoint, types, authenticated } = callAPI\n//\n//     const [ requestType, successType, errorType ] = types\n//\n//     // Passing the authenticated boolean back in our data will let us distinguish between normal and secret quotes\n//     return callApi(endpoint, authenticated).then(\n//         response =>\n//             next({\n//                 response,\n//                 authenticated,\n//                 type: successType\n//             }),\n//         error => next({\n//             error: error.message || 'There was an error.',\n//             type: errorType\n//         })\n//     )\n// }"]}