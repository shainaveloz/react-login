{"version":3,"sources":["../../../src/middleware/api.js"],"names":["BASE_URL","callApi","endpoint","authenticated","token","localStorage","getItem","config","headers","fetch","then","response","text","ok","Promise","reject","catch","console","log","err","CALL_API","Symbol","callAPI","action","next","types","requestType","successType","errorType","type","error","message"],"mappings":";;;;;;;;AAAA,IAAMA,WAAW,EAAjB;;AAEA,SAASC,OAAT,CAAiBC,QAAjB,EAA2BC,aAA3B,EAA0C;;AAEtC,QAAIC,QAAQC,aAAaC,OAAb,CAAqB,UAArB,KAAoC,IAAhD;AACA,QAAIC,SAAS,EAAb;;AAEA,QAAGJ,aAAH,EAAkB;AACd,YAAGC,KAAH,EAAU;AACNG,qBAAS;AACLC,yBAAS,EAAE,8BAA4BJ,KAA9B;AADJ,aAAT;AAGH,SAJD,MAKK;AACD,kBAAM,iBAAN;AACH;AACJ;;AAED,WAAOK,MAAMT,WAAWE,QAAjB,EAA2BK,MAA3B,EACFG,IADE,CACG;AAAA,eACFC,SAASC,IAAT,GAAgBF,IAAhB,CAAqB;AAAA,mBAAS,EAAEE,UAAF,EAAQD,kBAAR,EAAT;AAAA,SAArB,CADE;AAAA,KADH,EAGDD,IAHC,CAGI,gBAAwB;AAAA,YAArBE,IAAqB,QAArBA,IAAqB;AAAA,YAAfD,QAAe,QAAfA,QAAe;;AAC3B,YAAI,CAACA,SAASE,EAAd,EAAkB;AACd,mBAAOC,QAAQC,MAAR,CAAeH,IAAf,CAAP;AACH;;AAED,eAAOA,IAAP;AACH,KATE,EASAI,KATA,CASM;AAAA,eAAOC,QAAQC,GAAR,CAAYC,GAAZ,CAAP;AAAA,KATN,CAAP;AAUH;;AAEM,IAAMC,8BAAWC,OAAO,UAAP,CAAjB;;kBAEQ;AAAA,WAAS;AAAA,eAAQ,kBAAU;;AAEtC,gBAAMC,UAAUC,OAAOH,QAAP,CAAhB;;AAEA;AACA,gBAAI,OAAOE,OAAP,KAAmB,WAAvB,EAAoC;AAChC,uBAAOE,KAAKD,MAAL,CAAP;AACH;;AAPqC,gBAShCrB,QATgC,GASGoB,OATH,CAShCpB,QATgC;AAAA,gBAStBuB,KATsB,GASGH,OATH,CAStBG,KATsB;AAAA,gBASftB,aATe,GASGmB,OATH,CASfnB,aATe;;AAAA,wCAWUsB,KAXV;AAAA,gBAW9BC,WAX8B;AAAA,gBAWjBC,WAXiB;AAAA,gBAWJC,SAXI;;AAatC;;;AACA,mBAAO3B,QAAQC,QAAR,EAAkBC,aAAlB,EAAiCO,IAAjC,CACH;AAAA,uBACIc,KAAK;AACDb,sCADC;AAEDR,gDAFC;AAGD0B,0BAAMF;AAHL,iBAAL,CADJ;AAAA,aADG,EAOH;AAAA,uBAASH,KAAK;AACVM,2BAAOA,MAAMC,OAAN,IAAiB,qBADd;AAEVF,0BAAMD;AAFI,iBAAL,CAAT;AAAA,aAPG,CAAP;AAYH,SA1BuB;AAAA,KAAT;AAAA,C","file":"api.js","sourcesContent":["const BASE_URL = '';\n\nfunction callApi(endpoint, authenticated) {\n\n    let token = localStorage.getItem('id_token') || null\n    let config = {}\n\n    if(authenticated) {\n        if(token) {\n            config = {\n                headers: { 'x-access-token': `Bearer ${token}` }\n            }\n        }\n        else {\n            throw \"No token saved!\"\n        }\n    }\n\n    return fetch(BASE_URL + endpoint, config)\n        .then(response =>\n            response.text().then(text => ({ text, response }))\n        ).then(({ text, response }) => {\n            if (!response.ok) {\n                return Promise.reject(text)\n            }\n\n            return text\n        }).catch(err => console.log(err))\n}\n\nexport const CALL_API = Symbol('Call API')\n\nexport default store => next => action => {\n\n    const callAPI = action[CALL_API]\n\n    // So the middleware doesn't get applied to every single action\n    if (typeof callAPI === 'undefined') {\n        return next(action)\n    }\n\n    let { endpoint, types, authenticated } = callAPI\n\n    const [ requestType, successType, errorType ] = types\n\n    // Passing the authenticated boolean back in our data will let us distinguish between normal and secret quotes\n    return callApi(endpoint, authenticated).then(\n        response =>\n            next({\n                response,\n                authenticated,\n                type: successType\n            }),\n        error => next({\n            error: error.message || 'There was an error.',\n            type: errorType\n        })\n    )\n}"]}